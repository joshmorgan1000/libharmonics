# Harmonics DSL full grammar (PEG)
# Whitespace and comments are omitted for brevity.

harmonic      <- 'harmonic' IDENT block
block         <- '{' stmt* '}'
stmt          <- producer / consumer / layer / cycle
producer      <- 'producer' IDENT shape? ratio? ';'
consumer      <- 'consumer' IDENT shape? ';'
layer         <- 'layer' IDENT ratio? ';'
cycle         <- 'cycle' flowBlock
flowBlock     <- '{' flowStmt* '}'
flowStmt      <- conditional / flowLine
conditional   <- 'if' IDENT flowBlock ('else' flowBlock)?
# A flow line may omit the source IDENT to continue from the previous line.
flowLine      <- source? fArrow IDENT (pipe fArrow IDENT)* ';'
pipe          <- '|'
source        <- IDENT
fArrow        <- forwardArrow / forwardFuncArrow / backwardArrow / backwardFuncArrow
forwardArrow       <- '->'
forwardFuncArrow   <- '-(' IDENT ')->'
backwardArrow      <- '<-'
backwardFuncArrow  <- '<-(' IDENT ')-'
ratio         <- NUMBER '/' NUMBER IDENT
shape         <- '{' INT '}'
